class Solution:
    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:
        envelopes.sort(key=lambda x: (x[0], -x[1]))
        a = [envelopes[0][1]]
        for i in range(1, len(envelopes)):
            if envelopes[i][1] > a[-1]:
                a.append(envelopes[i][1])
            elif envelopes[i][1] <= a[0]:
                a[0] = envelopes[i][1]
            else:
                l = 0
                r = len(a) - 1
                while l <= r:
                    c = l + (r - l) // 2
                    if l == r or a[c] < envelopes[i][1] and a[c + 1] >= envelopes[i][1]:
                        a[c + 1] = envelopes[i][1]
                        break
                    elif a[c] < envelopes[i][1]:
                        l = c + 1
                    else:
                        r = c - 1
        return len(a)
    
# Time Complexity : O(nlogn)
# Space Complexity : O(n)
# Successfully implemented on Leetcode
